import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL_ID = "@your_channel"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

pending_reviews = {}  # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç–∑—ã–≤, –∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.")

@dp.message_handler()
async def handle_review(message: types.Message):
    review_id = message.message_id
    pending_reviews[review_id] = message
    
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{review_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{review_id}")
    )
    
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}:")
    await bot.send_message(ADMIN_ID, f"{message.text}", reply_markup=keyboard)
    await message.reply("–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

@dp.callback_query_handler(Text(startswith="approve_"))
async def approve_review(callback_query: types.CallbackQuery):
    review_id = int(callback_query.data.split('_')[1])
    if review_id in pending_reviews:
        review = pending_reviews.pop(review_id)
        await bot.send_message(CHANNEL_ID, f"üìù –û—Ç–∑—ã–≤: –í–∞—à —Ç–µ–∫—Å—Ç —Ç—É—Ç")
        await callback_query.answer("–û—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query_handler(Text(startswith="reject_"))
async def reject_review(callback_query: types.CallbackQuery):
    review_id = int(callback_query.data.split('_')[1])
    if review_id in pending_reviews:
        pending_reviews.pop(review_id)
        await callback_query.answer("–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
